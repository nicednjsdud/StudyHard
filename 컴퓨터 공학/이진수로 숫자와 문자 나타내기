서론
    - 컴퓨터가 수와 관련된 데이터를 나타내고 저장하는 방법
    - 부울대수학은 참과 거짓이라는 오직 두가지의 값만 나타낸다.
    - 만약 오직 이 두가지의 값만 갖고 있다면, 이 두가지를 넘어서 세상의 정보들은 어떻게 나타내야 할까?
        - 하나의 이진수는 숫자를 나타내는데 사용할 수 있다. 참과 거짓대신 0과 1을 사용하여 두가지 상태만 나타내는 것이다.
        - 만약 큰 수를 나타내고 싶으면 단순히 이진 숫자들을 더하기만 하면 된다.
        - 우리가 잘알고 있는 10진법이 그 예이다.

1. 10진수 계산법

    1) 263을 예로 들어보자 
        - 이숫자는 실제로 2개의 100과 6개의 10과 3개의 1를 의미한다. 
        - 이제 각각의 열들이 어떤 승수(곱하는 수)를 가지는지 주목해 보자. 이 경우엔 100과 10과 1이다.
        - 이 때, 각각의 곱하는 수는 오른쪽의 것보다 "10배"더크다.
            - 이러한 이유로 10기반 표기법이라고 부르기도하고, 10을 의미하는 deci 가 들어간 "십진수 (decial"라고 부르기도 한다.

2. 2 진수 계산법

    - 2진수도 똑같은 방식으로 작동한다. 0과 1   2개의 수로 말이다.
    - 이것은 하나의 자릿수가 오른쪽에 있는 수보다 2배이상 커야 된다는 것을 의미한다.
    - 100, 10, 1을 사용하는 대신 4,2,1들을 사용한다.

    1) 101이라는 이진수로 예를 들어보자.
        - 이숫자는 1개의 4와, 0개의 2, 1개의 1을 의미한다.
        - 모두합해 10진수에서 의미하는 5를 얻게된다.
        - 더큰 숫자를 나타내기위해 이진수는 더 많은 숫자를 필요로 한다.

    2) 이번엔 10110111을 예로 들어보겠다.
        - 앞과 똑같은 방식으로 10진수로 전환할 수 있다.
            - 1*128, 0*64, 1*32, 1*16, 0*8, 1*4, 1*2, 1*1 이걸 다 더하면 183이 된다.

3. 10진수 간의 덧셈 (183 + 19 =202)

    1) 10진수인 183과 19를 더하는 것으로 예를 들어보자
        - 먼저 3과 9를 더해 12가 되면 2를 합으로 쓰고 1을 10의 자리로 받아 올림 해 준다.
        - 이제 8과 1을 더하고 받아 올림 한 1을 더하면 10이되어 0을 합으로쓰고 1을 받아 올림 한다.
        - 마지막에 1과 받아올림 한 1을 더하면 2가된다. 총합은 202이다.

4. 2진수 간의 덧셈 (10110111 + 00010011 = 11001010)

    1) 2진수에서도 10진수와 똑같은 방식으로 덧셈을 한다.
        - 1과 1을 더하면 2가 된다. 그런데 2진수에서는 2를 상징하는 것이 없기 때문에 10을 사용해서 0을 합으로 쓰고 1은 이동해준다.
        - 다음으로, 1더하기 1과 받아 올려진 1을 더하면 총 3이고 이진법에선 11 (10+1)과 같은데, 1을 합으로 쓰고 다시 1을 받아 올림 해준다.
        - 그리고 계속 계산해 나가면 1101010이라는 결과를 얻게 되고, 이는 10진수로 202이다.
        - 2진수에서 1과 0은 각각 비트라고 불리고 8비트의 숫자로 사용했는데, 가장 작은 값으로 0, 가장 큰 값으로는 256이다.

5. 바이트의 개념과 부동 소수점

    1) 8비트 컴퓨터나 8비트 그래픽 또는 오디오라는 말을 들어본적이 있을것이다.
        - 이것은 8비트 덩어리들로 대부분의 작업을 했던 컴퓨터들을 가르키지만, 256가지의 다른 값들은 작업하기에는 작은 숫자이며,
          8비트 게임과 같은 경우 256가지의 색의 그래픽으로 한정되었다는 걸 의미한다.
    
    2) 또한, 킬로바이트, 메가바이트, 기가바이트와 같은 말을 들어봤던 적이 있을 것이다.
        - 이 접두사들은 다양한 크기의 데이터를 나타낸다. 1킬로그램이 1000그램인것처럼, 1킬로바이트는 1000바이트이다. 실제로는 8000비트이다.
        - 또한, 메가는 백만 바이트 MB, 기가는 10억 바이트이다(GB)
            - 오늘날 우리는 1테라 바이트의 저장 공간이 있는 하드 드라이브를 갖고 있기까지 한다. (이건 8조개의 0과 1이다.)

    3) 또한, 32비트나 64비트 컴퓨터라는 용어에 대해서도 들어봤을 것이다.
        - 그들이 32비트, 64비트 덩어리들로 작동한다는 것을 의미 
            - 엄청많은 비트

        - 32비트로 나타낼 수 있는 가장 큰 숫자는 43억 미만의 숫자이고 이진수에서는 32개의 1로 나타난다.
            - 인스타그램의 사진이 매우 부드럽고 예쁘게 나올 수 있는 이유이다.   

        - 현재 컴퓨터는 32비트 색상의 그래픽을 사용하기 때문에 우리는 수백만 가지 색깔로 이루어진 사진들을 볼 수 있다.

6. 2진수의 음수 표현

    1) 모든수가 양수는 아니다. 그래서 우리는 양수와 음수를 나타낼 수 있는 방법이 필요하다.
    2) 대부분의 컴퓨터는 부호의 첫 번째 비트에서 1을 음의 값, 0을 양의 값을 나타내는 신호로 사용한다.
        - 그리고 나머지 31비트는 그 숫자 자체를 나태낸다. 이걸로 대략 +-20억까지 범위의 수를 쓸 수 있다.

    3) 32비트는 꽤나 큰 범위의 수를 나타내지만 많은 작업을 하기에는 충분하지 않다.
        - 70억인구가 지구상에 있고, 미국 국가 채무는 20조 달러에 이르렀다. 이것은 64비트의 숫자가 왜 유용한지를 말해준다.

    4) 64비트로 나타낼 수 있는 가장 큰 숫자는 대략 920경이다.
        - 이 가능한 많은 숫자들이 한동안은 미국 채무보다는 더 위의 숫자로 머루를 것이다.

7. 2진수의 소수 표현

    1) 음수와 양수뿐만 아니라 컴퓨터는 정수가 아닌 다른수도 다룰 수 있어야 한다. 
        - ex) 12.7이나 3.14파이 423443.1 같은 수

    2) 이들은 부동 소수점이라고 불린다. 왜냐하면 소수점은 수들 사이로 이동이 가능하기 때문이다.
    3) 부동 소수점을 나타내기 위한 여러 방법들이 개발되었고, 가장 일반적인 것은 IEEE754 표준이다.
        - ex) 625.9는 0.6259 * 10^3으로 적는다
            - 6259는 유효숫자라고 부르고, 3은 지수라고 부른다.

    4) 32비트 부동 소수점 표기법에서, 첫번째 비트는 양이나 음의 부호를 나타내는 숫자를 넣는데 사용한다.
        다음 8비트는 지수를 저장하는 데에 사용하고, 나머지 23비트는 유효숫자를 나타내는데 사용한다.

8. 2진수를 이용해 문자를 나타내는 방법

    1) 컴퓨터는 문자를 저장하는데에 특별한 저장 공간을 갖기보단 단순히 숫자를 이용함
    2) 가장 직접적인 접근 방식으로는 단순하게 알파벳의 문자들에 번호를 매기는 방법이다.
        ex) A 는 1, B 는 2, C 는 3 이런식으로 말이다.

    3) 영국의 유명한 작가인 Francis Bacon은 26개의 모든 알파벳을 암호화하는데에 5비트의 연속된 순서를 사용했다.
        - 1600년대에 비밀 메세지를 보내는데에 말이다.
        - 이 5비트는 32가지 값을 저장할 수 있었기에 26개의 문자를 나타내는 데에 적합했지만 구두점, 숫자, 대소문자를 나타내기에는 부적합했다.

    4) ASCII Code를 살펴보자. 1963년에 발명된 아스키코드는 7비트의 코드이고, 128개의 다른 값을 저장할 수 있다/
        - 확장된 범위를 이용하면서 대문자와 소문자, 0부터 9까지의 숫자, @기호나 구두점과 "" 같은 상징적인 것들도 인코딩 할수 있게 되었다.
            - ex) 'a' = 97 이라는 숫에 해당한다. 그에비해 대문자 'A' = 65에 해당한다.

        - 또한 아스키에는 특별한 명령코드의 집합이 있었다. 
            - 줄바꿈 문자를 사용해서 다음 행으로 줄을 바꿀 위치를 컴퓨터에게 알려줄 수 있도록 했다.
            - 구형 컴퓨터에서는 문자의 줄은 그대로 화면의 가장자리에서 계속 될 것이다. 만약 줄바꿈문자를 사용하지않으면

        - ASCII는 초기의 표준이었기 때문에 널리 사용되었고 다른 회사에서 만든 여러 컴퓨터와 데이터를 교환하는데 중요하게 사용되었다.
        - 보편적으로 정보를 교환할 수 있는 이 능력을 "상호 운용성"이라고 한다.
        - ASCII 코드는 큰 한계가 있었다. 영어를 위해서만 설계되었다는것이다.
            - 다행히도, 1바이트 안에 7비트가 아닌 8비트가 있었고, 128부터 255가지 이전에는 국제적인 문자로 사용되지 않았던 코드가 곧 대중화 되었다.

9. 유니코드의 등장 - 전 세계의 문자를 표현 할수 있는 코드체계

    1) 유니코드는 그들 모두를 지배하는 형식이다.
        - 1992년에 제정된 이 프로젝트는 마침내 각각의 국제적인 제도를 없애고 하나의 보편적인 인코딩 구조로 대체했다.
    
    2) 유니코드의 가장 일반적인 버전은 16비트 공간을 사용해서 백만개가 넘는 코드를 넣을 수 있다.
        - 여태 사용되었던 모든 언어에 있는 각각의 글자를 지정하기에 충분하다. 즉, 100가지가 넘는 종류의 문자 12만개 이상 말이다.
        - 수학적인 기호들을 위한 공간과 이모티콘과 같은 기호들을 포함 할 수 있다.



        출처 : https://blog.naver.com/yellowpeach0/222552701701



