운영체제에 대해서

    1. 운영체제
        1) 운영체제의 의미와 목적 (운영체제란 무엇이고 왜 사용하는가?)
            - 사용자가 컴퓨터를 쉽게 이용할 수 있게 사용자 인터페이스 제공과 동시에 컴퓨터용자 간의 중개
              역할을 하는 시스템 소프트웨어이다. 
            - 컴퓨터 시스템의 하드웨어를 관리도 할뿐더러 응용 소프트웨어를 실행할 수 있게 
              하드웨어의 추상화 플랫폼과 공통의 시스템 서비스를 제공

                                        프로세스 관리
                                             |
            주기억 장치 관리  ---------   운영 체제(OS) ------------ 파일 및 디스크 관리
                                             |
                                        입출력 장치 및
                                        주변 장치 관리

            - 운영체제의 목적으로는 사용자에게 프로그램을 쉽고, 효율적인 환경 제공과 동시에 시스템 하드웨어 및
              소프트웨어 자원들을 다중 사용자들에게 효율적인 관리, 보호에 그 목적이 있다. 또한, 입출력 장치등의 
              자원에 대하여 연산과 제어를 관리

        2) 운영체제의 사용 예시 (어떤 곳에서 운영체제를 사용하는가?)
            - 가장 대표되는 운영체제인 유닉스를 이용한 OS 종류이다.
            - 유닉스 운영체제에는 버클리에서 개발한 BSD(Berkeley Software Distribution)계열이 있다.
                - BSD 운영체제 코드의 라이선스는 소스 코드를 수정, 추가해도 공개할 의무가 없기에 여러 기업에서 
                  운영체제를 배포하고 상업적으로 이용할 수 있게 만들어져 있다.
                    
                    - 이를 이용하여 여러 방면에서 사용자 환경에 맞는 운영체제를 만들수 있다.

                    1) NET BSD는 네트워크상에서 사용을 목적으로 만들어짐.
                        - 이식성이 매우좋아 56 종류의 플랫폼에서 실행

                    2) BET BSD에서 파생된 오픈소스 운영체제인 OPEN BSD는 컴퓨터 보안에 특화
                        - 네트워크에서 가장 중요한 게이트웨이의 방화벽에 널리쓰임

                    3) MacOS는 데스크톱에서 Windows 다음으로 많이 쓰이는 운영체제 
                        - 초기에는 GUI를 빠르게 적용하여 편리성을 줌
                        - 점차 보안, 안정성, 속도 등 나은 서비스를 제공

                    4) Apple사에서 생산하는 모바일 기기에 탑재되는 IOS
                        - MacOS를 기반으로 만들어졌고, 호환성과 보안성이 뛰어나며 직관적인 사용자 인터페이스를 가져 편리성을 갖춤
                        - 데스크톱의 대표 OS가 Windows라면 모바일의 대표 OS는 IOS이다.

                    5) 유닉스를 기반으로 파생된 OS는 썬 마이크로시스템즈에서 만든 Solaris 운영체제
                        - 기업의 서버나 워크스테이션용으로 사용되며 C와 C++로 개발
                        - Solaris의 파생형 운영체제인 Smart OS는 클라우드를 만들고 어플라이언스 생성에 알맞음

        3) 운영체제가 없고 동일한 일을 처리하려고 한다면 어떻게해야하나?

            - 운영체제의 일을 개발자가 대신하여야 하는데 운영체제 대신에 하드웨어의 구조가 어떻게 생꼇는지,
                각 구조의 역할은 무엇이고, I/O는 어떻게 작동시키는지 이해하고 있어야함

            - 개발자 입장에서는 매번 시스템 기반적인 코딩을 하며 기기를 컨트롤 해야함
                - 이는 매우 위험하며 비효율적인 과정이고, 사용자에게도 편리한 UI를 제공하지못하며 안정성과 신뢰성 하락.

            - 개발자와 하드웨어 사이에서 발판역할을 해주는 운영체제를 개발자에게서 빼앗아 간다는 것은
                사람과의 대화에서 언어를 빼앗아가는 것이며 언어의 부재로 쉬운대화가 안되고, 다른방식으로 대화하려해도 쉽지않음.
                                                
                                                      